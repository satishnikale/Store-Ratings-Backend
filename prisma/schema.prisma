// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user schema
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  address   String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  
  // A user can own a store
  ownedStore Store?
  
  // Ratings submitted by this user
  ratings   Rating[]
  
  @@map("users")
}

model Store {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // The owner of this store
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @unique
  
  // Ratings for this store
  ratings Rating[]
  
  @@map("stores")
}

model Rating {
  id      String @id @default(cuid())
  value   Int    // Rating value from 1 to 5
  comment String? // Optional comment
  
  // The user who submitted this rating
  user   User   @relation(fields: [userId], references: [id])
  userId String
  
  // The store being rated
  store   Store  @relation(fields: [storeId], references: [id])
  storeId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Ensure a user can only rate a store once
  @@unique([userId, storeId])
  @@map("ratings")
}

enum Role {
  ADMIN
  USER
  STORE_OWNER
}